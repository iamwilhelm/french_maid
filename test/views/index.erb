<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>French Maid's manual testing and examples</title>
    <script src="jquery-1.3.2.min.js" type="text/javascript"></script>
    <script src="french_maid.js" type="text/javascript"></script>

    <style>
      h1, h2, h3, h4, h5 { 
        margin: 0px 0px 10px 0px; 
        color: #252525;
      }
      p + h2 { margin-top: 30px; }
      .section { 
        min-height: 50px;
        border-left: 5px solid #999;
        padding: 10px;
        margin: 20px 5px;
      }
      body {
        font-family: Helvetica, Sans-serif;
        font-size: 14px;
        /* http://nz13590.deviantart.com/art/Sry-for-Fu-Chan-102084543 */
        background-image: url('meido-sketch.jpg');
        background-position: right 75px;
        background-repeat: no-repeat;
        background-attachment: fixed;
        margin: 30px 30px;
        line-height: 1.5em;
        color: #454545;
      }
      .hidden {
        display: none;
      }
      p { width: 700px; }
      .red { color: red }
      blockquote { 
        font-size: 18px; 
        font-style: italic; 
        margin: 30px 0px;
        padding: 40px 20px;
        border: 1px solid #f0f0f0;
        -moz-border-radius: 15px;
        -webkit-border-radius: 15px;
        width: 650px;
      }
      .steps {
        font-size: 22px;
        line-height: 1.5em;
      }
      .caption {
        font-size: 0.4em;
        font-weight: italic;
      }
    </style>
  </head>
  <body>
    <a href="http://github.com/iamwilhelm/french_maid"><img style="position: absolute; top: 0; right: 0; border: 0;" src="http://s3.amazonaws.com/github/ribbons/forkme_right_gray_6d6d6d.png" alt="Fork me on GitHub" /></a>
    
    <h1>
      French Maid
      <div class="caption" style="margin: 5px 0px">
        To be in service of others is the noble cause.  To do it unobtrusively is a noble art.
      </div>
    </h1>

    <blockquote style="width: 700px">
      <a href="http://github.com/iamwilhelm/french_maid">French maid</a> is a small javascript library that unobtrusively adds behaviors 
      that makes sense for links, forms, microformats and Html5.
    </blockquote>

    <p>
      Sometimes, you just need an Ajax link that dumps its results in a tag.  You can 
      do it by adding simple attributes:
      <pre>
&lt;a href="/french_women" data-remote="true" data-update="women_list"&gt;
  Click me for a list of famous french women
&lt;/a&gt;
&lt;p id="women_list"&gt;Empty list&lt;/p&gt;</pre>
      That'll give you this:
    </p>
    
    <p>
      <a href="/french_women" data-remote="true" data-update="women_list">
        Click me for a list of famous french women</a>
      <p id="women_list">
      </p>      
    </p>
    
    <p>
      Below is not only <a href="#top">the documentation, but all the examples</a> you'll 
      need to get an idea of what French maid can do and how to get started.  Don't be 
      shy about using "view source" in the browser to see how things are done.
    </p>

    <h2>Requirements</h2>
    <p>
      French maid requires jQuery 1.3.2+, which is included.
    </p>

    <h2>Installation</h2>
    <p>
      Right now, you'll need to clone the library using git.  
    </p>
    <pre>git clone http://github.com/iamwilhelm/french_maid.git</pre>
    <p>
      Once you clone the repository, link to (or copy) <b>french_maid.js</b> and 
      jquery to the javascript directory in your project, and include them 
      as scripts in your html code.  
    </p>

    <h2>Motivation</h2>
    <p>
      I was working with Sinatra, when I felt like I missed a lot of the niceities 
      provided with Rails.  So I started writing a unobtrusive lib so I could emulate 
      some of its behaviors.  Before long, I figured much of the reason why people 
      haven't really adopted microformats is that it doesn't actually do anything 
      in the browser.  
    </p>
    <p>
      People will only adopt tags that have some default behavior in the browser.
    </p>
    <p>
      It's great when working with mini-web frameworks like Sinatra, or other web 
      frameworks without javascript baked in.  You can also use it with Rails, as it 
      follows their convention for link behaviors.  No more javascript in your 
      template code, or a tangle of site-specific jQuery code.  
    </p>

    <h2><a name="top">Table of Services</a></h2>
    <ul>
      <li><a href="#polish_links">Polishing links</a></li>
      <li><a href="#polish_forms">Polishing forms</a></li>
      <li><a href="#polish_images">Polishing images</a></li>
      <li><a href="#polish_licenses">Polishing licenses</a></li>
    </ul>

    <h2><a name="polish_links">Polishing links</a> 
      <span style="font-size: 0.8em">(<a href="#top">top</a>)</span>
    </h2>
      
    <div class="section">
      <h3>Remote GET request that returns HTML (<a href="http://microformats.org/wiki/rest/ahah">AHAH microformat</a>)</h3>
      <a href="/french_women" data-remote="true" data-update="french_women_list">
        A list of famous french women</a>
      <p id="french_women_list">
      </p>
      <a href="" data-remote="false" data-update="remote_get_docs">docs</a>
      <div id="remote_get_docs" class="hidden">
        <p>
          To create a remote GET request link, add a <i>data-remote='true'</i> 
          attribute to any link.
        </p>
        It has a couple attributes it uses:
        <ul>
          <li>href - The URL where to make the AJAX request</li>
          <li>data-update - the id of the DOM elem to put the result</li>
        </ul>
        <p>
          Note that it requires the server to return html
        </p>
      </div>
    </div>

    <div class="section">
      <h3>Remote GET request that returns data as JSON</h3>
      <script type="text/javascript">
        $(document).ready(function() {
          calcAverage = function(data, textStatus) {
            var total = 0, number = 0, average = 0;
            for (key in data) {
               total += data[key];
               number += 1;
            };
            average = (number == 0) ? 0.0 : (total / number);

            $("#french_heights").html(
              "Called calcAverage() and used json data passed as parameter" + "<br/>" + 
              "JSON data:" + data.valueOf() + "<br/>" + 
              "The average height is: " + average + "<br/>");
          };
        });
      </script>
      <a href="/heights" data-remote="true" data-update-success="calcAverage">
        A list of heights of random french women</a>
      <p id="french_heights">
      </p>
      <a href="" data-remote="false" data-update="remote_get_function_docs">docs</a>
      <div id="remote_get_function_docs" class="hidden">
        <p>
          When you want to process json data returned by the server, make sure 
          <i>data-remote="true"</i> as usual, but this time, <i>data-update-success</i>
          is the *NAME* of the javascript callback function that needs to execute in order to process
          the JSON data returned from the server.
        </p>
        <ul>
          <li>data-remote - <b>true</b>.  It has to be set to true for this to work.
          <li>data-update-success: The function name of attribute to execute upon AJAX request.  
            You can either name a function at the global level, or an object's method.
          </li>
          <li>data-update-failure: Not yet implemented</li>
        </ul>
      </div>
    </div>

    <div class="section">
      <h3>Non-remote links to toggle sections</h3>
      <a href="" data-remote="false" data-update="vacuums_list">
        A list of vacuums
      </a>
      <ul id="vacuums_list" class="hidden">
        <li>Dyson</li>
        <li>Hoover</li>
        <li>Swiffer</li>
      </ul>
      <p/>
      <a href="" data-remote="false" data-update="no_remote_toggle_docs">docs</a>
      <div id="no_remote_toggle_docs" class="hidden">
        With the data-remote attribute set to false, by simply putting in the 
        data-update field makes the DOM element it's pointing to toggle on and off.
        Make sure that the href attribute is present, but empty.
      </div>
    </div>

    <h2>
      <a name="polish_forms">Polishing forms</a>
      <span style="font-size: 0.8em">(<a href="#top">top</a>)</span>
    </h2>
    
    <div class="section">
      <h3>Remote POST form submit</h3>
      <p>
        Submit a french food
      </p>
      <form action="create" method="post" data-remote="true" 
            data-update="new_french_food">
        <input type="text_field" name="food[name]" />
        <input type="submit" name="submit[create]" value="Create" />
      </form>
      <p id="new_french_food">
      </p>
      <a href="" data-remote="false" data-update="remote_get_doc">docs</a>
      <div id="remote_get_doc" class="hidden">
        The form needs a couple attributes:
        <ul>
          <li>data-remote - needs to be set to true</li>
          <li>action - The URL to submit the AJAX request</li>
          <li>method - The method in which to submit</li>
          <li>data-update - the id of html element to put results</li>
        </ul>
      </div>
    </div>

    <div class="section">
      <h3>Search form placeholder (<a href="http://www.whatwg.org/specs/web-apps/current-work/multipage/common-input-element-attributes.html#attr-input-placeholder">HTML5 specification</a>)</h3>
      <p>
        Puts a form placeholder if the browser doesn't support HTML5's spec
      </p>
      <form action="create" method="post" data-remote="true" 
            data-update="placeholder_french_food">
        <input type="text_field" name="food[name]" placeholder="Type a food here" />
        <input type="submit" name="submit[create]" value="Create" />
      </form>
      <p id="placeholder_french_food">
      </p>
      
      <a href="" data-remote="false" data-update="placeholder_doc">docs</a>
      <div id="placeholder_doc" class="hidden">
        Simply put a placeholder attribute in the input tag
        <pre>&lt;input type="text_field" placeholder="Type a food here" /&gt;</pre>
      </div>      
    </div>

    <h2>
      <a name="polish_images">Polishing images</a>
      <span style="font-size: 0.8em">(<a href="#top">top</a>)</span>
    </h2>
    <div class="section">
      <h3>Lorem ipsum for images</h3>
      <p>
        Can use to lay out a page before you have the actual images.  
      </p>
      <table style="width: 400px; border: 1px solid #ddd">
        <tr>
          <td style="width: 50px" valign="top">
            <img class="lorem" data-size="50x50" />
          </td>
          <td align="left">
            <h4><a href="http://github.com/iamwilhelm/french_maid">French Maid</a> 
              likes bacon, ootoro sushi, and cheese
            </h4>
            <p style="font-size: 10px">
              <img class="lorem" data-size="16x16" /> 3 hours ago via French Maid · Comment · Like
            </p>
          </td>
        </tr>
      </table>

      <div style="margin: 20px 0px">
        <% 4.times do %>
        <div style="float: left; min-width: 150px;">
          <img class="lorem" style="margin: 10px 0px" data-size="127x102" data-color="red"/><br/>
          A french maid naked<br/>
          <span style="color: #888">450 x 360 · 28k · jpg</span><br/>
          fm.com<br/>
          <a href="http://images.google.com/images?hl=en&um=1&sa=1&q=french+maid&aq=f&oq=&aqi=g10&start=0">
            Find similar images
          </a>
        </div>
        <% end %>
      </div>

      <div style="clear: both">&nbsp;</div>

      <a href="" data-remote="false" data-update="image_lorem_docs">docs</a>
      <div id="image_lorem_docs" class="hidden">
        An easy way to set the license on a page
        <ul>
          <li>class - "lorem"</li>
          <li>data-size - in the form "200x100"</li>
          <li>data-color (optional) - some css color</li>
        </ul>
      </div>

    </div>

    <h2>
      <a name="polish_licenses">Polishing licenses</a>
      <span style="font-size: 0.8em">(<a href="#top">top</a>)</span>
    </h2>

    <div class="section">
      <h3>Public Domain Licenses (<a href="http://microformats.org/wiki/rel-license">license uFormat</a>)</h3>
      <table width="50%">
        <tr align="left">
          <th>License</th>
          <th>Sample</th>
        <tr/>
        <tr>
          <td>Gnu GPL</td>
          <td>
            <a rel="license" data-license="gpl" data-version="2.0"></a>
          </td>
        </tr>
        <tr>
          <td>Gnu LGPL</td>
          <td>
            <a rel="license" data-license="lgpl" data-version="2.1"></a>
          </td>
        </tr>
        <tr>
          <td>Public Domain</td>
          <td>
            <a rel="license" data-license="pd">public domain</a>
          </td>
        </tr>
        <tr>
          <td>Creative Commons 0</td>
          <td>
            <a rel="license" data-license="cc0"></a>
          </td>
        </tr>
      </table>
      
      <a href="" data-remote="false" data-update="gpl_docs">docs</a>
      <div id="gpl_docs" class="hidden">
        An easy way to set the license on a page
        <ul>
          <li>rel = "license"  Indicates to french maid this is a license link</li>
          <li>data-license - the type of license
            <ul>
              <li>gpl - gnu public license</li>
              <li>pd - public domain</li>
            </ul>
          </li>
        </ul>
      </div>
    </div>

    <div class="footer">
      Manual test, documentation, and demo of <a href="http://github.com/iamwilhelm/french_maid">French maid</a>
    </div>

  </body>
</html>
